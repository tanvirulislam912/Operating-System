
#include <stdio.h>

struct Process {
    int id;
    int burst_time;
    int waiting_time;
    int turnaround_time;
};

void sjf_scheduling(struct Process processes[], int n) {
    int total_waiting_time = 0, total_turnaround_time = 0;
    int i, j, smallest, time = 0;

    // Sort processes based on burst time (SJF)
    for (i = 0; i < n - 1; i++) {
        smallest = i;
        for (j = i + 1; j < n; j++) {
            if (processes[j].burst_time < processes[smallest].burst_time) {
                smallest = j;
            }
        }

        // Swap the processes
        struct Process temp = processes[i];
        processes[i] = processes[smallest];
        processes[smallest] = temp;
    }

    // Calculate waiting time and turnaround time
    for (i = 0; i < n; i++) {
        processes[i].waiting_time = time;
        time += processes[i].burst_time;
        processes[i].turnaround_time = time;
        total_waiting_time += processes[i].waiting_time;
        total_turnaround_time += processes[i].turnaround_time;
    }

    // Print the results
    printf("Process\tBurst Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].burst_time, processes[i].waiting_time,
               processes[i].turnaround_time);
    }

    // Print average waiting time and turnaround time
    float average_waiting_time = (float) total_waiting_time / n;
    float average_turnaround_time = (float) total_turnaround_time / n;
    printf("\nAverage Waiting Time: %.2f\n", average_waiting_time);
    printf("Average Turnaround Time: %.2f\n", average_turnaround_time);
}

int main() {
    int n, i;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];
    printf("Enter burst time for each process:\n");
    for (i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Process %d: ", processes[i].id);
        scanf("%d", &processes[i].burst_time);
    }

    sjf_scheduling(processes, n);

    return 0;
}





2
#include <stdio.h>

void sjf(int n, int bt[], int at[]) {
    int wt[n], tat[n], ct[n];
    int total_wt = 0, total_tat = 0;

    // Calculate completion time
    int i, j, min, temp;
    for (i = 0; i < n; i++) {
        min = i;
        for (j = i + 1; j < n; j++) {
            if (bt[j] < bt[min])
                min = j;
        }
        // Swap the shortest job with the current position
        temp = bt[min];
        bt[min] = bt[i];
        bt[i] = temp;

        temp = at[min];
        at[min] = at[i];
        at[i] = temp;

        ct[i] = bt[i] + (i > 0 ? ct[i - 1] : 0);
    }

    // Calculate turnaround time and waiting time
    for (i = 0; i < n; i++) {
        tat[i] = ct[i] - at[i];
        wt[i] = tat[i] - bt[i];
        total_wt += wt[i];
        total_tat += tat[i];
    }

    // Print the results
    printf("Process\tBurst Time\tArrival Time\tCompletion Time\tWaiting Time\tTurnaround Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", i + 1, bt[i], at[i], ct[i], wt[i], tat[i]);
    }

    float avg_wt = (float)total_wt / n;
    float avg_tat = (float)total_tat / n;
    printf("\nAverage Waiting Time: %.2f\n", avg_wt);
    printf("Average Turnaround Time: %.2f\n", avg_tat);
}

int main() {
    int n, i;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int bt[n], at[n];
    printf("Enter burst time and arrival time for each process:\n");
    for (i = 0; i < n; i++) {
        printf("Process %d:\n", i + 1);
        scanf("%d%d", &bt[i], &at[i]);
    }

    sjf(n, bt, at);

    return 0;
}





3
#include<stdio.h>

struct process {
    int pid;
    int burst_time;
};

void SJF(struct process p[], int n) {
    int i, j, temp_pid, temp_burst_time;
   
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (p[j].burst_time > p[j + 1].burst_time) {
                // Swap burst time
                temp_burst_time = p[j].burst_time;
                p[j].burst_time = p[j + 1].burst_time;
                p[j + 1].burst_time = temp_burst_time;
               
                // Swap process ID
                temp_pid = p[j].pid;
                p[j].pid = p[j + 1].pid;
                p[j + 1].pid = temp_pid;
            }
        }
    }
}

int main() {
    int n, i;
    printf("Enter the number of processes: ");
    scanf("%d", &n);
   
    struct process p[n];
   
    for (i = 0; i < n; i++) {
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d", &p[i].burst_time);
        p[i].pid = i + 1;
    }
   
    SJF(p, n);
   
    printf("\nShortest Job First (SJF) Scheduling Order:\n");
    printf("Process\tBurst Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\n", p[i].pid, p[i].burst_time);
    }
   
    return 0;
}






4
#include <stdio.h>

void calculateWT(int n, int BT[], int WT[])
{
    WT[0] = 0;
    for (int i = 1; i < n; i++)
        WT[i] = BT[i - 1] + WT[i - 1];
}

void calculateTAT(int n, int BT[], int WT[], int TAT[])
{
    for (int i = 0; i < n; i++)
        TAT[i] = BT[i] + WT[i];
}

void calculateAT(int n, int BT[])
{
    int WT[n], TAT[n], TWT = 0, TTAT = 0;

    calculateWT(n, BT, WT);

    calculateTAT(n, BT, WT, TAT);

    printf("Process\t Burst Time\t Waiting Time\t Turnaround Time\n");

    for (int i = 0; i < n; i++)
    {
        TWT = TWT + WT[i];
        TTAT = TTAT + TAT[i];
        printf("%d\t%d\t\t%d\t\t%d\n", i + 1, BT[i], WT[i], TAT[i]);
    }

    printf("\nAverage waiting time: %.2f", (float)TWT / n);
    printf("\nAverage turnaround time: %.2f", (float)TTAT / n);
}

int main()
{
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int BT[n];
    printf("Enter the burst time for each process:\n");
    for (int i = 0; i < n; i++)
    {
        printf("Process %d: ", i + 1);
        scanf("%d", &BT[i]);
    }

    // Sort the burst time array in ascending order
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (BT[j] > BT[j + 1])
            {
                int temp = BT[j];
                BT[j] = BT[j + 1];
                BT[j + 1] = temp;
            }
        }
    }

    calculateAT(n, BT);

    return 0;
}





NEW

#include <stdio.h>

void calculateWT(int n, int BT[], int WT[], int process[])
{
    // Sort the burst time and process arrays in ascending order using bubble sort
    for (int i = 0; i < n - 1; i++)
    {
        for (int j = 0; j < n - i - 1; j++)
        {
            if (BT[j] > BT[j + 1])
            {
                // Swap burst time
                int temp = BT[j];
                BT[j] = BT[j + 1];
                BT[j + 1] = temp;

                // Swap process number
                temp = process[j];
                process[j] = process[j + 1];
                process[j + 1] = temp;
            }
        }
    }

    // Calculate the waiting time
    WT[0] = 0;
    for (int i = 1; i < n; i++)
    {
        WT[i] = BT[i - 1] + WT[i - 1];
    }
}

void calculateTAT(int n, int BT[], int WT[], int TAT[])
{
    // Calculate the turnaround time
    for (int i = 0; i < n; i++)
    {
        TAT[i] = BT[i] + WT[i];
    }
}

void calculateAT(int n, int BT[])
{
    int process[n], WT[n], TAT[n], TWT = 0, TTAT = 0;

    // Initialize the process array
    for (int i = 0; i < n; i++)
    {
        process[i] = i + 1;
    }

    calculateWT(n, BT, WT, process);

    calculateTAT(n, BT, WT, TAT);

    printf("Process\t Burst Time\t Waiting Time\t Turnaround Time\n");

    for (int i = 0; i < n; i++)
    {
        TWT = TWT + WT[i];
        TTAT = TTAT + TAT[i];
        printf("%d\t%d\t\t%d\t\t%d\n", process[i], BT[i], WT[i], TAT[i]);
    }

    printf("\nAverage waiting time: %.2f", (float)TWT / n);
    printf("\nAverage turnaround time: %.2f", (float)TTAT / n);
}

int main()
{
    int n;
    printf("Enter number of processes: ");
    scanf("%d", &n);

    int BT[n];
    printf("Enter the burst time for each process:\n");
    for (int i = 0; i < n; i++)
    {
        printf("Process %d: ", i + 1);
        scanf("%d", &BT[i]);
    }

    calculateAT(n, BT);

    return 0;
}

